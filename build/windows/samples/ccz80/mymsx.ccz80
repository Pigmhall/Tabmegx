// MSX library for ccz80 version 2.0.7
// (edited)

include "standard.ccz80";

asm
{
  "; BIOS routines",
  "__chkram: equ #0000",
  "__synchr: equ #0008",
  "__rdslt:  equ #000C",
  "__chrgtr: equ #0010",
  "__wrslt:  equ #0014",
  "__outdo:  equ #0018",
  "__calslt: equ #001C",
  "__dcompr: equ #0020",
  "__enaslt: equ #0024",
  "__getypr: equ #0028",
  "__callf:  equ #0030",
  "__keyint: equ #0038",
  "__initio: equ #003B",
  "__inifnk: equ #003E",
  "__disscr: equ #0041",
  "__enascr: equ #0044",
  "__wrtvdp: equ #0047",
  "__rdvrm:  equ #004A",
  "__wrtvrm: equ #004D",
  "__setrd:  equ #0050",
  "__setwrt: equ #0053",
  "__filvrm: equ #0056",
  "__ldirmv: equ #0059",
  "__ldirvm: equ #005C",
  "__chgmod: equ #005F",
  "__chgclr: equ #0062",
  "__nmi:    equ #0066",
  "__clrspr: equ #0069",
  "__initxt: equ #006C",
  "__init32: equ #006F",
  "__inigrp: equ #0072",
  "__inimlt: equ #0075",
  "__settxt: equ #0078",
  "__sett32: equ #007B",
  "__setgrp: equ #007E",
  "__setmlt: equ #0081",
  "__calpat: equ #0084",
  "__calatr: equ #0087",
  "__gspsiz: equ #008A",
  "__grpprt: equ #008D",
  "__gicini: equ #0090",
  "__wrtpsg: equ #0093",
  "__rdpsg:  equ #0096",
  "__strtms: equ #0099",
  "__chsns:  equ #009C",
  "__chget:  equ #009F",
  "__chput:  equ #00A2",
  "__lptout: equ #00A5",
  "__lptstt: equ #00A8",
  "__cnvchr: equ #00AB",
  "__pinlin: equ #00AE",
  "__inlin:  equ #00B1",
  "__qinlin: equ #00B4",
  "__breakx: equ #00B7",
  "__beep:   equ #00C0",
  "__cls:    equ #00C3",
  "__posit:  equ #00C6",
  "__fnksb:  equ #00C9",
  "__erafnk: equ #00CC",
  "__dspfnk: equ #00CF",
  "__totext: equ #00D2",
  "__gtstck: equ #00D5",
  "__gttrig: equ #00D8",
  "__gtpad:  equ #00DB",
  "__gtpdl:  equ #00DE",
  "__tapion: equ #00E1",
  "__tapin:  equ #00E4",
  "__tapiof: equ #00E7",
  "__tapoon: equ #00EA",
  "__tapout: equ #00ED",
  "__tapoof: equ #00F0",
  "__stmotr: equ #00F3",
  "__chgcap: equ #0132",
  "__chgsnd: equ #0135",
  "__rslreg: equ #0138",
  "__wslreg: equ #013B",
  "__rdvdp:  equ #013E",
  "__snsmat: equ #0141",
  "__phydio: equ #0144",
  "__isflio: equ #014A",
  "__outdlp: equ #014D",
  "__kilbuf: equ #0156",
  "__calbas: equ #0159",
  "_CLIKSW: equ #F3DB",
}

// Sets the screen to mode specified.
function inline byte screen(byte)
{
  "call __chgmod"
}

// Sets the screen colors for background, ink and border.
function byte color(byte, byte, byte)
{
  "ld   hl,3",
  "add  hl,sp",
  "ld   a,(hl)             ; A = 3th parameter",
  "ld   (#F3EB),a",
  "inc  hl",
  "inc  hl",
  "ld   a,(hl)             ; A = 2nd parameter",
  "ld   (#F3EA),a",
  "inc  hl",
  "inc  hl",
  "ld   a,(hl)             ; A = 1st parameter",
  "ld   (#F3E9),a",
  "jp   __chgclr"
}

// Returns the ASCII code of the key pressed or 0 if nothing is pressed
function inline byte inkey()
{
  "call __chsns",
  "ld   a,0",
  "call nz,__chget         ; Read char from buffer if it exists"
}

// Prints in screen the specified character.
function inline byte printc(byte)
{
  "call __chput"
}

// Prints in screen the specified string.
function register byte prints(word)
{
  "ld   a,(hl)",
  "or   a",
  "ret  z",
  "call __chput",
  "inc  hl",
  "jr   _prints"
}

// Prints in screen the specified byte value.
function register byte printb(byte)
{
  "ld   hl,__printb_1      ; HL = string buffer address",
  "call __btoa_0",
  "jp   _prints",
  "__printb_1: defs 4",
} using btoa, prints;

// Prints in screen the specified word value.
function register byte printw(word)
{
  "ld   de,__printw_1",
  "call __wtoa_0",
  "jp   _prints",
  "__printw_1: defs 6",
} using wtoa, prints;

// Gets from keyboard a text and store it in the specified string.
function register byte input(word)
{
  "ld   d,h",
  "ld   e,l                ; DE = 1st parameter copy",
  "ld   bc,0               ; Initialize characters counter",
  "__input_1:",
  "call __chget",
  "cp   8",
  "jr   nz,__input_2",
  "ld   a,b",
  "or   c",
  "jr   z,__input_1        ; String length is zero",
  "ld   a,8",
  "call __chput",
  "ld   a,\" \"",
  "call __chput",
  "ld   a,8",
  "call __chput",
  "dec  de",
  "dec  bc",
  "jr   __input_1",
  "__input_2:",
  "cp   13",
  "jr   z,__input_3        ; Enter key pressed",
  "call __chput",
  "ld   (de),a",
  "inc  de",
  "inc  bc",
  "jr   __input_1",
  "__input_3:",
  "xor  a",
  "ld   (de),a",
  "ret"
}

// Sends to printer the specified character.
function inline byte lprintc(byte)
{
  "call __lptout"
}

// Sends to printer the specified string.
function register byte lprints(word)
{
  "ld   a,(hl)",
  "or   a",
  "ret  z",
  "call __lptout",
  "inc  hl",
  "jr   _lprints"
}

// Sends to printer the specified byte value.
function register byte lprintb(byte)
{
  "ld   hl,__lprintb_1     ; HL = string buffer address",
  "call __btoa_0",
  "jp   _lprints",
  "__lprintb_1: defs 4",
} using btoa, lprints;

// Sends to printer the specified word value.
function register byte lprintw(word)
{
  "ld   de,__lprintw_1",
  "call __wtoa_0",
  "jp   _lprints",
  "__lprintw_1: defs 6",
} using wtoa, lprints;

// Sounds a beep.
function inline byte beep()
{
  "call __beep"
}

// Clears the screen.
function inline byte cls()
{
//  "call __cls"
 "ld hl,6144","ld a,32","ld bc,768","call __filvrm"
}

// Sets the text cursor position to column and row specified.
function byte locate(byte, byte)
{
  "ld   hl,3",
  "add  hl,sp",
  "ld   a,(hl)",
  "inc  hl",
  "inc  hl",
  "ld   h,(hl)             ; H = 1st parameter",
  "ld   l,a                ; L = 2nd parameter",
  "jp   __posit"
}

// Shows the functions key values.
function inline byte keyon()
{
  "call __dspfnk"
}

// Hide the functions key values.
function inline byte keyoff()
{
  "call __erafnk"
}

// Returns the status of joystick, same as STICK command in BASIC.
function inline byte stick(byte)
{
  "call __gtstck"
}

function inline byte strig(byte)
{
  "call __gttrig"
}

function inline byte kilbuf()
{
  "call __kilbuf"
}

function byte ldirvm(word,word,word)
{
  "ld   hl,2",
  "add  hl,sp",
  "ld c,(hl)",
  "inc hl",
  "ld b,(hl)",
  "inc hl",
  "ld e,(hl)",
  "inc hl",
  "ld d,(hl)",
  "inc hl",
  "ld a,(hl)",
  "inc hl",
  "ld h,(hl)",
  "ld l,a",
  "jp __ldirvm"
}

function byte vpoke(word,byte)
{
  "ld   hl,3",
  "add  hl,sp",
  "ld a,(hl)",
  "inc hl",
  "ld e,(hl)",
  "inc hl",
  "ld d,(hl)",
  "ld h,d",
  "ld l,e",
  "jp __wrtvrm"
}

function byte sound(byte,byte)
{
  "ld   hl,3",
  "add  hl,sp",
  "ld e,(hl)",
  "inc hl",
  "inc hl",
  "ld a,(hl)",
  "jp __wrtpsg"
}

function inline byte vpeek(word)
{
 "call __rdvrm"
}


// spn,x,y,col,ptn
function byte putsprite(byte,byte,byte,byte,byte){
 "ld hl,3",
 "add hl,sp",
 "ld a,(hl)",
 "ld (__satbl+2),a",
 "inc hl",
 "inc hl",
 "ld a,(hl)",
 "ld (__satbl+3),a",
 "inc hl",
 "inc hl",
 "ld a,(hl)",
 "ld (__satbl),a",
 "inc hl",
 "inc hl",
 "ld a,(hl)",
 "ld (__satbl+1),a",
 "inc hl",
 "inc hl",
 "ld a,(hl)",
 "ld l,a",
 "ld h,0",
 "ld a,4",
 "ld de,0",
 "ex de,hl",
 "ld   b,8",
 "rra",
 "jr   nc,$+3",
 "add  hl,de",
 "sla  e",
 "rl   d",
 "djnz $-8",
 "ld   b,h",
 "ld   c,l",
 "ld   hl,(__satblad)",
 "add  hl,bc",
 "ex de,hl",
 "ld bc,4",
 "ld hl,__satbl",
 "jp __ldirvm",
 "__satbl:defb 0,0,0,0",
 "__satblad:defw #1e00"
}

function inline byte getkey(byte){
 "call __snsmat"
}

function byte ldirmv(word,word,word)
{
  "ld   hl,2",
  "add  hl,sp",
  "ld c,(hl)",
  "inc hl",
  "ld b,(hl)",
  "inc hl",
  "ld e,(hl)",
  "inc hl",
  "ld d,(hl)",
  "inc hl",
  "ld a,(hl)",
  "inc hl",
  "ld h,(hl)",
  "ld l,a",
  "jp __ldirmv"
}

function byte filvrm(word,byte,word)
{
  "ld   hl,2",
  "add  hl,sp",
  "ld c,(hl)",
  "inc hl",
  "ld b,(hl)",
  "inc hl",
  "inc hl",
  "ld a,(hl)",
  "inc hl",
  "ld e,(hl)",
  "inc hl",
  "ld d,(hl)",
  "ld h,d",
  "ld l,e",
  "jp __filvrm"
}

function byte print(byte,byte,word){
 "ld   hl,2",
 "add  hl,sp",
 "ld c,(hl)",
 "inc hl",
 "ld b,(hl)",
 "push bc",
 "inc hl",
 "inc hl",
 "ld e,(hl)",
 "ld d,0",
 "inc hl",
 "inc hl",
 "ld c,(hl)",
 "ld b,0",

 "ld   hl,6144",
 "add  hl,bc",
 "push hl",
 "ex   de,hl",
 "ld   a,32",
 "ld   de,0",
 "ex   de,hl",
 "ld   b,8",
 "rra",
 "jr   nc,$+3",
 "add  hl,de",
 "sla  e",
 "rl   d",
 "djnz $-8",
 "ld   b,h",
 "ld   c,l",
 "pop  hl",
 "add  hl,bc",
 "pop bc",
 "__printloop:",
 "ld   a,(bc)",
 "or   a",
 "ret  z",
 "call __wrtvrm",
 "inc  bc",
 "inc  hl",
 "jr   __printloop"
}

function inline byte cliksw(byte){
 "ld (_CLIKSW),a"
}

function inline byte rslreg(){
 "call __rslreg"
}

function byte enaslt(word,byte){
 "ld   hl,3",
 "add  hl,sp",
 "ld a,(hl)",
 "inc hl",
 "ld e,(hl)",
 "inc hl",
 "ld d,(hl)",
 "ld h,d",
 "ld l,e",
 "call __enaslt",
 "ei",
 "ret"
 }
